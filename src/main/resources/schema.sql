create table if not exists FRIENDSHIP_STATUSES
(
    friendship_status_id int generated by default as identity primary key,
    status_name          varchar(64)
);

create table if not exists GENRES
(
    genre_id   int not null primary key auto_increment,
    genre_name varchar(32)
);

create table if not exists MPA_RATINGS
(
    mpa_rating_id int generated by default as identity primary key,
    mpa_name      varchar(6)
);

create table if not exists FILMS
(
    film_id       int generated by default as identity primary key,
    film_name     varchar(64),
    description   varchar(200),
    release_date  timestamp,
    duration      int,
    mpa_rating_id int references MPA_RATINGS (mpa_rating_id)
);

create table if not exists FILM_GENRES
(
    film_id  int not null references FILMS (film_id) on delete cascade,
    genre_id int not null references GENRES (genre_id),
    PRIMARY KEY (film_id, genre_id)
);

create table if not exists USERS
(
    user_id  int generated by default as identity primary key,
    email    varchar(64),
    login    varchar(64),
    username varchar(64),
    birthday timestamp
);

create table if not exists USER_FRIENDS
(
    user_id              int references USERS (user_id) on delete cascade,
    friend_id            int references USERS (user_id) on delete cascade,
    friendship_status_id int references FRIENDSHIP_STATUSES (friendship_status_id),
    PRIMARY KEY (user_id, friend_id)
);

create table if not exists LIKES
(
    film_id int references FILMS (film_id) on delete cascade,
    user_id int references USERS (user_id) on delete cascade,
    primary key (film_id, user_id)
);

create table if not exists REVIEWS
(
    review_id       long generated by default as identity primary key,
    content         varchar(200),
    positive_status boolean,
    user_id         int references USERS (user_id),
    film_id         int references FILMS (film_id)
);

create table if not exists LIKES_REVIEWS
(
    review_id    long references REVIEWS (review_id) on delete cascade,
    user_id      int references USERS (user_id),
    like_dislike int,
    primary key (review_id, user_id)
);

create table if not exists DIRECTORS
(
    director_id   int generated by default as identity primary key,
    director_name varchar(64)
);

create table if not exists FILM_DIRECTORS
(
    film_id     int references FILMS (film_id),
    director_id int references DIRECTORS (director_id) on delete cascade,
    PRIMARY KEY (film_id, director_id)
);

create table if not exists FEEDS
(
    event_id   int generated by default as identity primary key,
    feed_time  long,
    user_id    int references USERS (user_id) on delete cascade,
    event_type varchar(20) not null,
    operation  varchar(20) not null,
    entity_id  int
);